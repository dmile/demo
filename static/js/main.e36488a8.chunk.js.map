{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","width","height","getVideoDevice","_callee4","mediaDevices","videoDevices","videoDevice","regenerator_default","a","wrap","_context4","prev","next","navigator","enumerateDevices","sent","filter","device","kind","console","log","concat","deviceId","abrupt","stop","getVideoStream","_callee5","mediaStreamConstraints","videoStream","_context5","video","exact","max","getUserMedia","id","createVideoTag","document","createElement","body","appendChild","srcObject","onloadedmetadata","play","createCanvasTag","canvas","getImageCapture","videoTrack","getVideoTracks","ImageCapture","dummyBlob","Blob","type","sendNewPhoto","_callee6","webSocket","imageCapture","blob","_context6","takePhoto","tmp","send","toPhoto","_callee7","_context7","createImageBitmap","_demo","Object","asyncToGenerator","mark","_callee3","canvas2dContext","_context3","getContext","WebSocket","binaryType","onopen","_callee","_context","onmessage","_ref3","_callee2","_ref2","data","photo","_context2","drawImage","_x5","apply","this","arguments","onclose","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e36488a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'image-capture'\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst width = 320;\nconst height = 240;\n\nasync function getVideoDevice() {\n    const mediaDevices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = mediaDevices.filter(device => device.kind === 'videoinput');\n    const videoDevice = videoDevices[0];\n    console.log(`Video device selected: ${videoDevice.deviceId}`);\n    return videoDevice;\n}\n\nasync function getVideoStream(videoDevice) {\n    const mediaStreamConstraints = {\n        video: {\n            deviceId: {\n                exact: videoDevice.deviceId\n            },\n            width: {\n                max: width,\n            },\n            height: {\n                max: height,\n            },\n            // frameRate: 15\n        }\n    };\n    const videoStream = await navigator.mediaDevices.getUserMedia(mediaStreamConstraints);\n    console.log(`Video stream opened: ${videoStream.id}`);\n    return videoStream;\n}\n\nfunction createVideoTag(videoStream) {\n    const video = document.createElement(\"video\");\n    document.body.appendChild(video);\n    video.width = width;\n    video.height = height;\n    video.srcObject = videoStream;\n    video.onloadedmetadata = () => {\n        video.play();\n        console.log(`Video playing`);\n    };\n    return video;\n}\n\nfunction createCanvasTag() {\n    const canvas = document.createElement(\"canvas\");\n    document.body.appendChild(canvas);\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n}\n\nfunction getImageCapture(videoStream) {\n    const videoTrack = videoStream.getVideoTracks()[0];\n    return new ImageCapture(videoTrack);\n}\n\nconst dummyBlob = new Blob(['Tiny content'], {type: 'image/png'});\n\nasync function sendNewPhoto(webSocket, imageCapture) {\n    const blob = await imageCapture.takePhoto();\n    // --- real photo is too large ---\n    // ws.send(blob);\n    // --- sending dummy instead ---\n    window.tmp = blob;\n    webSocket.send(dummyBlob);\n}\n\nasync function toPhoto(blob) {\n    // --- echo service returns dummy photo ---\n    // return createImageBitmap(blob);\n    // --- using real one instead\n    return createImageBitmap(window.tmp);\n}\n\n(async function demo() {\n\n    const videoDevice = await getVideoDevice();\n    const videoStream = await getVideoStream(videoDevice);\n\n    const imageCapture = getImageCapture(videoStream);\n\n    createVideoTag(videoStream);\n    const canvas2dContext = createCanvasTag()\n        .getContext('2d');\n\n    const webSocket = new WebSocket('ws://demos.kaazing.com/echo');\n    webSocket.binaryType = 'blob';\n    webSocket.onopen = async () => {\n        console.log(`Web socked opened`);\n        await sendNewPhoto(webSocket, imageCapture);\n    };\n    webSocket.onmessage = async ({data}) => {\n        const photo = await toPhoto(data);\n        canvas2dContext.drawImage(photo, 0, 0, width, height);\n        await sendNewPhoto(webSocket, imageCapture);\n    };\n    webSocket.onclose = () => {\n        console.log(`Web socked closed`);\n    };\n\n})();\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}